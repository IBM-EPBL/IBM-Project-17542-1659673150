# -*- coding: utf-8 -*-
"""RandomForest-model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10bWib8Q6o-M16CBySB3yoYktXYa0sbl6
"""

##import libraries
import pandas as pd
import numpy as np
import matplotlib as plt
from sklearn.preprocessing  import LabelEncoder
import pickle
import seaborn as sns

car=pd.read_csv(r"C:\Users\narma\OneDrive\Desktop\Project\autos.csv",header=0,sep=',',encoding='Latin1',)

car.sample()

car.info()

##remove unwanted columns
car.drop(['Unnamed: 0','car_name','min_cost_price','max_cost_price','seller_type'],axis='columns',inplace=True)
car.sample()

car1=car.copy()
car1=car1.drop_duplicates(['brand','model','vehicle_age','km_driven','fuel_type','transmission_type','mileage','engine','max_power','seats','Owner_type','selling_price'])

car1.shape

sns.histplot(data=car1,x='km_driven')

#remove outliears
cols= ['km_driven' , 'mileage' , 'engine' , 'max_power','selling_price']

car2 = car1.copy()
from datasist.structdata import detect_outliers 

outliears = detect_outliers(car2[cols],0,car2[cols].columns)
car2.drop(outliears,inplace=True)

car2.shape
car2.sample()

##saving cleaned datadet
car2.to_csv("autos_preprocessed.csv")

car2['fuel_type'].unique()

##convert categorical columns into label encoding
labels=['brand','model','fuel_type','transmission_type']
mapper={}
for i in labels:
    mapper[i]=LabelEncoder()
    mapper[i].fit(car2[i])
    tr=mapper[i].transform(car2[i])
    np.save(str('classes'+i+'.npy'),mapper[i].classes_)
    print(i,":",mapper[i])
    car2.loc[:,i + '_labels']=pd.Series(tr,index=car2.index)
labeled=car2[['selling_price','vehicle_age','km_driven','mileage','engine','max_power','seats','Owner_type']+[x+"_labels" for x in labels]]
print(labeled.columns)

labeled.info()

labeled.sample()

labeled.info()

labeled.isnull().any()

labeled['model_labels'].unique()

##split the data set
X=labeled.iloc[:,1:].values
Y=labeled.iloc[:,0].values
Y=Y.reshape(-1,1)

np.isnan(X)

##train the dataset
from sklearn.model_selection import cross_val_score,train_test_split

X_train, X_test, Y_train, Y_test = train_test_split(X,Y, test_size=0.2, random_state=111)
print (X_train.shape)
print (X_test.shape)
print (Y_train.shape)
print (Y_test.shape)

##model building
##random forest
from sklearn.ensemble import RandomForestRegressor
regressor=RandomForestRegressor()
regressor.fit(X_train,np.ravel(Y_train,order='C'))

regressor.score(X_train,Y_train)

regressor.score(X_test,Y_test)

pred_test=regressor.predict(X_test)
pred_test

Y_test

#evaluation metrics
from sklearn.metrics import mean_squared_error,r2_score
RMSE=r2_score(pred_test,Y_test)
RMSE

labeled.info()

#saving the model
import pickle
filename='random.pkl'
pickle.dump(regressor,open(filename,"wb"))

